name: Create Release with Changelog

on:
  workflow_run:
    workflows: ["Publish to PyPI"]
    types:
      - completed
  workflow_dispatch:  # Allows manual trigger
    inputs:
      version:
        description: 'Version to create release for (e.g., 2025.10.15)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog generation

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=$(grep -oP '__version__ = "\K[^"]*' webscout/version.py)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Get previous tag
        id: previous_tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "No previous tag found"
          else
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "Previous tag: $PREVIOUS_TAG"
          fi

      - name: Extract changelog from changelog.md
        id: changelog
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          
          # Check if changelog.md exists
          if [ ! -f "changelog.md" ]; then
            echo "Error: changelog.md not found"
            exit 1
          fi
          
          # Extract the section for the current version from changelog.md
          # Look for the specific version section
          awk "/^# üöÄ What's Changed in v${VERSION}$/{flag=1} flag{print; if(/^---$/){exit}}" changelog.md > RELEASE_NOTES.md
          
          # If no content was extracted, check if version matches
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "Warning: Could not find changelog entry for v$VERSION in changelog.md"
            echo "Generating basic changelog from git commits..."
            
            echo "# üöÄ What's Changed in v$VERSION" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            if [ -z "$PREVIOUS_TAG" ]; then
              echo "üìù **Initial Release**" >> RELEASE_NOTES.md
            else
              echo "üìù **Changes since $PREVIOUS_TAG**" >> RELEASE_NOTES.md
              echo "" >> RELEASE_NOTES.md
              echo "## üì¶ Changes" >> RELEASE_NOTES.md
              git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
            fi
            
            echo "" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "## üì¶ Installation" >> RELEASE_NOTES.md
            echo '```bash' >> RELEASE_NOTES.md
            echo "pip install --upgrade webscout==$VERSION" >> RELEASE_NOTES.md
            echo '```' >> RELEASE_NOTES.md
          fi
          
          # Output for GitHub Actions
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: false  # We generate our own
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload changelog artifact
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-artifact@v5
        with:
          name: changelog-v${{ steps.get_version.outputs.version }}
          path: RELEASE_NOTES.md
          retention-days: 90

      - name: Comment on related PRs
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.get_version.outputs.version }}';
            const previousTag = '${{ steps.previous_tag.outputs.previous_tag }}';
            
            if (!previousTag) {
              console.log('No previous tag, skipping PR comments');
              return;
            }
            
            // Get commits in this release
            const commits = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: previousTag,
              head: 'HEAD'
            });
            
            // Extract PR numbers from commit messages
            const prNumbers = new Set();
            for (const commit of commits.data.commits) {
              const match = commit.commit.message.match(/#(\d+)/g);
              if (match) {
                match.forEach(pr => prNumbers.add(parseInt(pr.slice(1))));
              }
            }
            
            // Comment on each PR
            for (const prNumber of prNumbers) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `üéâ This PR is included in [v${version}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${version})!\n\nInstall it with:\n\`\`\`bash\npip install --upgrade webscout==${version}\n\`\`\``
                });
                console.log(`Commented on PR #${prNumber}`);
              } catch (error) {
                console.log(`Failed to comment on PR #${prNumber}: ${error.message}`);
              }
            }

      - name: Notification
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "‚úÖ Successfully created release v${{ steps.get_version.outputs.version }} with changelog!"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.version }}"

      - name: Skip notification
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "‚ÑπÔ∏è Release v${{ steps.get_version.outputs.version }} already exists, skipping creation"
